[project]
name = "{{cookiecutter.package_name}}"
description = "{{cookiecutter.short_description}}"
readme = "README.md"
requires-python = ">=3.7"
license = { file = "LICENSE" }
authors = [
    { name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}" },
]
keywords = [
    "Python",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
dynamic = ["version"]

dependencies = [{% if cookiecutter.command_line_interface|lower != "false" %}
    "typer >=0.6.0",{% endif %}
]

{% if cookiecutter.command_line_interface|lower != "false" %}
[project.scripts]
{{cookiecutter.package_name}} = "{{cookiecutter.module_name}}.__main__:cli"{% endif %}


[project.optional-dependencies]
test = [
    "pytest >=7.1.3,<8.0.0",
    "pytest-cov >=2.12.0,<4.0.0",
    "coveralls",
    "mypy ==0.971",
    "black == 22.8.0",
    "isort >=5.0.6,<6.0.0",
    "flake8 >=3.8.3,<6.0.0",
    "Flake8-pyproject>=1.1.0.post0",
    "flaky",
]{% if cookiecutter.documentation_website|lower != "false" %}
doc = [
    "mkdocs >=1.1.2,<2.0.0",
    "mkdocs-material >=8.2.7,<9.0.0",
    "mkdocstrings[python] >=0.18.1",
    "mdx-include >=1.4.1,<2.0.0",
    "mkdocs-markdownextradata-plugin >=0.1.7,<0.3.0",
    "jinja2 ==3.0.3",
]{% endif %}
dev = [
    "pre-commit >=2.17.0,<3.0.0",
    "autoflake >=1.4.0,<2.0.0",
    "jupyter",
    "notebook",
    "types-requests",
]


[project.urls]
Homepage = "https://github.com/{{cookiecutter.github_organization_name}}/{{cookiecutter.package_name}}"
Documentation = "https://github.com/{{cookiecutter.github_organization_name}}/{{cookiecutter.package_name}}"
History = "https://github.com/{{cookiecutter.github_organization_name}}/{{cookiecutter.package_name}}/releases"
Tracker = "https://github.com/{{cookiecutter.github_organization_name}}/{{cookiecutter.package_name}}/issues"
Source = "https://github.com/{{cookiecutter.github_organization_name}}/{{cookiecutter.package_name}}"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
    "dev",{% if cookiecutter.documentation_website|lower != "false" %}
    "doc",{% endif %}
]
post-install-commands = [
    "pre-commit install",
]

[tool.hatch.envs.default.scripts]
dev = "./scripts/dev.sh"
test = "./scripts/test.sh {args}"
format = "./scripts/format.sh"
lint = "./scripts/lint.sh"
all = "./scripts/all.sh"{% if cookiecutter.documentation_website|lower != "false" %}
docs = "./scripts/docs.sh"
{% endif %}

# TOOLS
[tool.hatch.version]
path = "src/{{cookiecutter.module_name}}/__init__.py"


[tool.isort]
line_length = 120
skip = ["{{cookiecutter.module_name}}/__init__.py"]
profile = "black"


[tool.coverage.run]
source = ["project"]
branch = true

[tool.coverage.report]
omit = ["tests/*"]


[tool.flake8]
max-complexity = 17
max-line-length = 120
per-file-ignores = [
    "__init__.py:F401",
]
ignore = [
    "E501", # line too long
    "E303", # too many blank lines
    "E301", # expected 1 blank lines found 0
    "W503", # line break before binary operator
]


[tool.mypy]
strict = false
disallow_untyped_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true


[tool.pytest.ini_options]
markers = [
    "no_rsa_key: mark a test as a test only run when there is no nanopub RSA key setup.",
]

# [tool.black]
# color = true
# line-length = 120
# target-version = ['py310']
# skip-string-normalization = true
